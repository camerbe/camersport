<?php

namespace App\Repositories;

use App\Http\Resources\LiveMatchResource;
use App\Models\Livematch;
use App\Models\Matchsheet;
use App\Models\Team;
use Illuminate\Support\Carbon;
use Illuminate\Support\Str;

/**
 *
 */
class LiveMatchRepository extends Repository implements ILiveMatchRrepository
{

    /**
     * @param Livematch $livematch
     */
    public function __construct(Livematch $livematch)
    {
        parent::__construct($livematch);
    }

    /**
     * @param $orderBy
     * @return mixed
     */
    public function all($orderBy = ['created_at' => 'desc'])
    {
        $liveMatchs= parent::all($orderBy);
        return  LiveMatchResource::collection($liveMatchs) ;
    }

    /**
     * @param $id
     * @return mixed
     */
    public function find($id)
    {
        $liveMatch=parent::find($id);
        if ($liveMatch && isset($liveMatch->player)){
            $liveMatch->player=json_decode($liveMatch->player);
        }
        return new LiveMatchResource($liveMatch) ;
        //return LiveMatchResource::collection($liveMatch);
    }

    /**
     * @param array $data
     * @return mixed
     */
    public function create(array $data)
    {
        //\DB::enableQueryLog();
        $data['player']=json_encode($data['player']);
        unset($data['event_second']);
        return parent::create($data); // TODO: Change the autogenerated stub
        //dd(\DB::getQueryLog());
    }

    /**
     * @param $id
     * @param array $data
     * @return mixed
     */
    public function update($id, array $data)
    {
        //dd($data);
        $liveMatch=parent::find($id);
        $data['matchsheet_id']= $data["matchsheet_id"] ?? $liveMatch->matchsheet_id;
        $data['team_id']= $data["team_id"] ?? $liveMatch->team_id;
        $data['event_type']= $data['event_type'] ?? $liveMatch->event_type;
        //dd($data['event_type']);
        $data['description']= $data["description"] ?? $liveMatch->description;
        $data['event_minute']= $data["event_minute"] ?? $liveMatch->event_minute;
        $data['status']= $data["status"] ?? $liveMatch->status;
        $data['player']=isset($data['player'])? json_encode($data['player']):$liveMatch->player;
        unset($data['event_second']);
        return parent::update($id, $data); // TODO: Change the autogenerated stub
    }

    /**
     * @param $id
     * @return mixed
     */
    public function delete($id)
    {
        return parent::delete($id); // TODO: Change the autogenerated stub
    }

    /**
     * @param $match_id
     * @return \Illuminate\Database\Eloquent\Collection
     */
    function getLiveMatch(int $match_id)
    {
        return Livematch::with(['team','matchsheet'])
            ->where('matchsheet_id',$match_id)
            ->where('status', 'confirmed')
            ->orderBy('created_at')
            ->get();
        // TODO: Implement getLiveMatch() method.
    }

    /**
     * @return mixed
     */
    function getLastMatchSheet()
    {
        $lastMatch= Matchsheet::last();
        if ($lastMatch && isset($lastMatch->team_a_data)){
            $lastMatch->team_a_data=json_decode($lastMatch->team_a_data);
            $lastMatch->team_b_data=json_decode($lastMatch->team_b_data);
        }
        return $lastMatch;

    }

    /**
     * @return mixed
     */
    public function getTeams(){
        return Team::orderBy('name','asc')->get();
    }
}
